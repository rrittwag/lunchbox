image: node:16-alpine

# Cachen der Dependencies
# - Der Cache beschleunigt den CI-Lauf durch Vorhalten von Dependencies & anderen Downloads.
# - key: ${CI_COMMIT_REF_SLUG} cacht für alle CI-Läufe eines Branches, 'any-key' cacht für alle CI-Läufe eines Projekts
# - Jobs des selben CI-Laufs tauschen ihre Resultate via 'artifacts' aus, nicht per Caching!
# - ACHTUNG: Das Caching greift nicht zwingend! Jeder Job muss darauf gefasst sein, den Cache neu aufzubauen!
# - Doku siehe https://docs.gitlab.com/ee/ci/caching/
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - frontend-web-vue/node_modules/
  policy: pull

before_script:
  - cd frontend-web-vue # Gitlab startet Jobs in Root-Pfad. Die meisten folgenden Aufrufe sind jedoch auf den Sub-Pfad bezogen.
  - export CI=true # vermeidet interaktive yarn-Aufrufe

stages:
  - build
  - test
  - publish

install & build:
  stage: build
  script:
    - yarn install --non-interactive
    - yarn build
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - frontend-web-vue/node_modules/
    policy: pull-push
  artifacts:
    paths:
      - frontend-web-vue/dist/
    expire_in: 1 hour

lint:
  stage: test
  script:
    - "[ ! -d node_modules/ ] && yarn install --non-interactive" # falls der CI-Cache nicht greift, Abhängigkeiten neu runterladen
    - yarn lint:check

typecheck:
  stage: test
  script:
    - "[ ! -d node_modules/ ] && yarn install --non-interactive" # falls der CI-Cache nicht greift, Abhängigkeiten neu runterladen
    - yarn typecheck

unit:
  stage: test
#  coverage: '/All files([^|]*\|){4}[^|]*\s+([\d\.]+)/'
  script:
    - "[ ! -d node_modules/ ] && yarn install --non-interactive" # falls der CI-Cache nicht greift, Abhängigkeiten neu runterladen
    - yarn test:unit

# TODO: End-to-End-Tests benötigen Chrome oder Firefox
.e2e:
  stage: test
  script:
    - "[ ! -d node_modules/ ] && yarn install --non-interactive" # falls der CI-Cache nicht greift, Abhängigkeiten neu runterladen
    - yarn test:e2e

docker:
  stage: publish
  image: docker
  services:
    - docker:dind # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-workflow-with-docker-executor
  variables:
    CONTAINER_NAME: lunchbox-frontend
    DOCKER_REGISTRY_ADDR: $DOCKER_REGISTRY_ADDR # wird von Gitlab hereingereicht
    DOCKER_REGISTRY_USER: $DOCKER_REGISTRY_USER # wird von Gitlab hereingereicht
    DOCKER_REGISTRY_TOKEN: $DOCKER_REGISTRY_TOKEN # wird von Gitlab hereingereicht
    DOCKER_HOST: 'tcp://docker:2375'
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  only:
    - master
  script:
    - cd nginx && ./build.sh && cd ..
    - echo "$DOCKER_REGISTRY_TOKEN" | docker login -u $DOCKER_REGISTRY_USER --password-stdin $DOCKER_REGISTRY_ADDR
    - docker build -t ${DOCKER_REGISTRY_ADDR}/${CONTAINER_NAME}:latest --pull .
    - docker push ${DOCKER_REGISTRY_ADDR}/${CONTAINER_NAME}:latest
