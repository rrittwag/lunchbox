# Cachen der Dependencies
# - Der Cache beschleunigt den CI-Lauf durch Vorhalten von Dependencies & anderen Downloads.
# - key: ${CI_COMMIT_REF_SLUG} cacht f체r alle CI-L채ufe eines Branches, 'any-key' cacht f체r alle CI-L채ufe eines Projekts
# - Jobs des selben CI-Laufs tauschen ihre Resultate via 'artifacts' aus, nicht per Caching!
# - ACHTUNG: Das Caching greift nicht zwingend! Jeder Job muss darauf gefasst sein, den Cache neu aufzubauen!
# - Doku siehe https://docs.gitlab.com/ee/ci/caching/
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - .go/pkg/mod/
  policy: pull

before_script:
  - cd service-ocr # Gitlab startet Jobs in Root-Pfad. Die meisten folgenden Aufrufe sind jedoch auf den Sub-Pfad bezogen.

stages:
  - test
  - publish

test:
  stage: test
  script:
    - echo "TODO"

docker:
  stage: publish
  image: docker
  services:
    - docker:dind # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-workflow-with-docker-executor
  variables:
    CONTAINER_NAME: lunchbox-service-ocr
    DOCKER_REGISTRY_ADDR: $DOCKER_REGISTRY_ADDR # wird von Gitlab hereingereicht
    DOCKER_REGISTRY_USER: $DOCKER_REGISTRY_USER # wird von Gitlab hereingereicht
    DOCKER_REGISTRY_TOKEN: $DOCKER_REGISTRY_TOKEN # wird von Gitlab hereingereicht
    DOCKER_HOST: "tcp://docker:2375'
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  only:
    - master
  script:
    - echo "$DOCKER_REGISTRY_TOKEN" | docker login -u $DOCKER_REGISTRY_USER --password-stdin $DOCKER_REGISTRY_ADDR
    - docker build -t ${DOCKER_REGISTRY_ADDR}/${CONTAINER_NAME}:latest --pull .
    - docker push ${DOCKER_REGISTRY_ADDR}/${CONTAINER_NAME}:latest
