// -------------------
//   Unit-Tests mit JUnit 5
// -------------------
ext.testcontainersVersion = '1.16.2'

dependencies {
  // JUnit 5
  testImplementation 'org.springframework.boot:spring-boot-starter-test'
  testImplementation 'org.junit.jupiter:junit-jupiter-api'
  testRuntimeOnly    'org.junit.jupiter:junit-jupiter-engine'
  testImplementation 'org.junit.jupiter:junit-jupiter-params'

  // Kotlin
  testImplementation 'org.amshove.kluent:kluent:1.68'    // assertions
  testImplementation 'io.mockk:mockk'                    // mocking
  testImplementation 'com.ninja-squad:springmockk:3.1.0' // support @MockkBean injection

  // TestContainers for integration tests
  testIntegrationImplementation "org.testcontainers:junit-jupiter:${testcontainersVersion}"
  testIntegrationImplementation "org.testcontainers:nginx:${testcontainersVersion}"
  testIntegrationImplementation 'junit:junit' // Bugfixing https://github.com/testcontainers/testcontainers-java/issues/970
}

configurations {
  // testImplementation.exclude group: 'junit', module: 'junit' // entfernt die transitive Abhängigkeit zu JUnit 4, um Konflikte mit JUnit 5 und falsche Importe zu vermeiden
  all*.exclude module: 'mockito-core'          // Mockito is replaced by MockK
}

test {
  useJUnitPlatform()
  testLogging { exceptionFormat = 'full' }
}


// -------------------
//   Integrations-Tests mit JUnit 5
// -------------------
task testIntegration(
    type: Test,
    description: 'Führt die Integrations-Tests aus.',
    group: 'Verification') {
      shouldRunAfter test

      testClassesDirs = sourceSets.testIntegration.output.classesDirs
      classpath = sourceSets.testIntegration.runtimeClasspath

      useJUnitPlatform()
      maxParallelForks = (int) (Runtime.runtime.availableProcessors().intdiv(2) ?: 1) // Test-Klassen parallel ausführen
      testLogging { exceptionFormat = 'full' }

      reports.html.required = false // Report-Generierung frisst unnötig CI-Zeit
    }

task testAll ( dependsOn: tasks.withType(Test) )


// -------------------
//   Testabdeckung mit Java Code Coverage
// -------------------
apply plugin: "jacoco"

jacocoTestReport {
  executionData tasks.withType(Test) // Ergebnisse der Unit- und Integrations-Tests zur Testabdeckung heranziehen
  doFirst {
    executionData.from = files(executionData.findAll { it.exists() })
  }
}

jacocoTestCoverageVerification {
  violationRules {
    rule { limit { minimum = 0.5 } } // mindestens 50% Testabdeckung, sonst schlägt Task fehl!
  }
}

// Der Task-Name 'testCoverage' ist eingängiger als 'jacocoTestReport' ...
task testCoverage(
    dependsOn: 'jacocoTestReport',
    description: 'Gibt Coverageinformationen aus (Alias für jacocoTestReport).',
    group: 'Verification')
