image: eclipse-temurin:17-alpine

# Cachen der Dependencies
# - Der Cache beschleunigt den CI-Lauf durch Vorhalten von Dependencies & anderen Downloads.
# - key: ${CI_COMMIT_REF_SLUG} cacht für alle CI-Läufe eines Branches, 'any-key' cacht für alle CI-Läufe eines Projekts
# - Jobs des selben CI-Laufs tauschen ihre Resultate via 'artifacts' aus, nicht per Caching!
# - ACHTUNG: Das Caching greift nicht zwingend! Jeder Job muss darauf gefasst sein, den Cache neu aufzubauen!
# - Doku siehe https://docs.gitlab.com/ee/ci/caching/
cache:
  key: ${CI_COMMIT_REF_SLUG}
  paths:
    - backend-spring-kotlin/.gradle/wrapper
    - backend-spring-kotlin/.gradle/caches
  policy: pull

before_script:
  - cd backend-spring-kotlin # Gitlab startet Jobs in Root-Pfad. Die meisten folgenden Aufrufe sind jedoch auf den Sub-Pfad bezogen.
  - export GRADLE_USER_HOME=`pwd`/.gradle
  - export GRADLE_OPTS="-Dorg.gradle.daemon=false -Dorg.gradle.internal.launcher.welcomeMessageEnabled=false"

stages:
  - build
  - test
  - publish

build:
  stage: build
  script:
    - ./gradlew assemble
  cache:
    key: ${CI_COMMIT_REF_SLUG}
    paths:
      - backend-spring-kotlin/.gradle/wrapper
      - backend-spring-kotlin/.gradle/caches
    policy: pull-push
  artifacts:
    paths:
      - backend-spring-kotlin/build/libs/*.jar
    expire_in: 1 hour

lint:
  stage: test
  script:
    - ./gradlew formatCheck
    - ./gradlew lint
  artifacts:
    paths:
      - backend-spring-kotlin/build/reports/detekt/*
    when: always
    expire_in: 1 week

unit:
  stage: test
  script:
    - ./gradlew test
  artifacts:
    reports:
      junit: backend-spring-kotlin/build/test-results/test/TEST-*.xml
    paths:
      - backend-spring-kotlin/build/test-results/test/TEST-*.xml
    when: always
    expire_in: 1 week

integration:
  stage: test
  services:
    - docker:dind # Notwendig für Volume-Mounts in TestContainers -> https://www.testcontainers.org/supported_docker_environment/continuous_integration/gitlab_ci/
  variables:
    DOCKER_HOST: 'tcp://docker:2375'
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  script:
    - ./gradlew testIntegration
  artifacts:
    reports:
      junit: backend-spring-kotlin/build/test-results/testIntegration/TEST-*.xml
    paths:
      - backend-spring-kotlin/build/test-results/testIntegration/TEST-*.xml
    when: always
    expire_in: 1 week

vulnerabilities docker:
  stage: test
  image: docker
  services:
    - docker:dind # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-workflow-with-docker-executor
  variables:
    DOCKER_HOST: 'tcp://docker:2375'
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
    IMAGE: trivy-ci-test:$CI_COMMIT_SHA
  script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    - echo $TRIVY_VERSION
    - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
    - docker build -t $IMAGE --pull .
    - ./trivy image --exit-code 0 --no-progress --format template --template "@contrib/gitlab.tpl" --security-checks vuln -o gl-container-scanning-report.json $IMAGE
    - ./trivy image --exit-code 0 --no-progress --severity HIGH --security-checks vuln $IMAGE
    - ./trivy image --exit-code 1 --severity CRITICAL --no-progress --security-checks vuln $IMAGE
  artifacts:
    when: always
    reports:
      container_scanning: backend-spring-kotlin/gl-container-scanning-report.json

docker:
  stage: publish
  image: docker
  services:
    - docker:dind # https://docs.gitlab.com/ee/ci/docker/using_docker_build.html#use-docker-in-docker-workflow-with-docker-executor
  variables:
    CONTAINER_NAME: lunchbox-backend
    DOCKER_REGISTRY_ADDR: $DOCKER_REGISTRY_ADDR # wird von Gitlab hereingereicht
    DOCKER_REGISTRY_USER: $DOCKER_REGISTRY_USER # wird von Gitlab hereingereicht
    DOCKER_REGISTRY_TOKEN: $DOCKER_REGISTRY_TOKEN # wird von Gitlab hereingereicht
    DOCKER_HOST: 'tcp://docker:2375'
    DOCKER_DRIVER: overlay2
    DOCKER_TLS_CERTDIR: ""
  only:
    - master
  script:
    - echo "$DOCKER_REGISTRY_TOKEN" | docker login -u $DOCKER_REGISTRY_USER --password-stdin $DOCKER_REGISTRY_ADDR
    - docker build -t ${DOCKER_REGISTRY_ADDR}/${CONTAINER_NAME}:latest --pull .
    - docker push ${DOCKER_REGISTRY_ADDR}/${CONTAINER_NAME}:latest
